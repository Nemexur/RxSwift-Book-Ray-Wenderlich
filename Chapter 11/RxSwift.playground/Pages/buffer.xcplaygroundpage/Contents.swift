import UIKit
import RxSwift
import RxCocoa

let bufferTimeSpan: RxTimeInterval = 4
let bufferMaxCount = 2

let sourceObservable = PublishSubject<String>()

let sourceTimeline = TimelineView<String>.make()
let bufferedTimeline = TimelineView<Int>.make()

let stack = UIStackView.makeVertical([
    UILabel.makeTitle("buffer"),
    UILabel.make("Emitted elements:"),
    sourceTimeline,
    UILabel.make("Buffered elements (at most \(bufferMaxCount) every \(bufferTimeSpan) seconds):"),
    bufferedTimeline])

_ = sourceObservable.subscribe(sourceTimeline)

sourceObservable
    /*
    –≠–ª–µ–º–µ–Ω—Ç—ã –∏–∑ SO –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ RO. –í –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è count, ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ, –∏ timeSpan –≤—Ä–µ–º—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ SO. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —ç–ª–µ–º–µ–Ω—Ç RO, —è–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–∞—Å—Å–∏–≤ [T], –¥–ª–∏–Ω–Ω–æ–π –æ—Ç 0 –¥–æ count.
    */
    /*
    –¢–æ –µ—Å—Ç—å timeSpan –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞, –∑–∞—Ç–µ–º –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. Count - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ, —Ç–∞–∫ –∫–∞–∫ buffer —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —ç—Ç–æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –∂–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ buffer –≤—ã–∫–∏–¥—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞. Scheduler - –ø—Ä–æ—Å—Ç–æ –Ω–∞ –∫–∞–∫–æ–º –ø–æ—Ç–æ–∫–µ –≤—ã–¥–∞–≤–∞—Ç—å, —É –Ω–∞—Å –≥–ª–∞–≤–Ω—ã–π —Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å UI
    */
    /*
    Even though there is no activity on the source observable, you can witness empty buffers on the buffered timeline. The buffer(_:scheduler:) operators emits empty arrays at regular intervals if nothing has been received from its source observable. The 0s mean that zero elements have been emitted from the source sequence.
    */
    .buffer(timeSpan: bufferTimeSpan, count: bufferMaxCount, scheduler:
        MainScheduler.instance)
    .map { $0.count }
    .subscribe(bufferedTimeline)

let hostView = setupHostView()
hostView.addSubview(stack)
hostView

DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
    sourceObservable.onNext("üêÆ")
    sourceObservable.onNext("üêÆ")
    sourceObservable.onNext("üêÆ")
}

let elementsPerSecond = 0.7
let timer = DispatchSource.timer(interval: 3.0 /
    Double(elementsPerSecond), queue: .main) {
        sourceObservable.onNext("üêÆ")
        }

// Support code -- DO NOT REMOVE
class TimelineView<E>: TimelineViewBase, ObserverType where E: CustomStringConvertible {
  static func make() -> TimelineView<E> {
    let view = TimelineView(frame: CGRect(x: 0, y: 0, width: 400, height: 100))
    view.setup()
    return view
  }
  public func on(_ event: Event<E>) {
    switch event {
    case .next(let value):
      add(.Next(String(describing: value)))
    case .completed:
      add(.Completed())
    case .error(_):
      add(.Error())
    }
  }
}
